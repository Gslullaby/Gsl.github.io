<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gsl&#39;s blog</title>
  
  <subtitle>Keep Trying</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://gslullaby.github.io/"/>
  <updated>2018-07-28T06:43:40.559Z</updated>
  <id>http://gslullaby.github.io/</id>
  
  <author>
    <name>何从</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>scala中的函数</title>
    <link href="http://gslullaby.github.io/2018/07/23/scala%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://gslullaby.github.io/2018/07/23/scala中的函数/</id>
    <published>2018-07-23T06:31:46.000Z</published>
    <updated>2018-07-28T06:43:40.559Z</updated>
    
    <content type="html"><![CDATA[<p>在各类blog及scala书籍中看到的关于函数最多的一句话是</p><blockquote><p>函数是一等公民</p></blockquote><p>可以看出函数在scala中举足轻重的地位，因此很有必要去全面的掌握它</p><h2 id="scala函数基础"><a href="#scala函数基础" class="headerlink" title="scala函数基础"></a>scala函数基础</h2><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><ul><li><p>匿名函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> (x: Int) =&gt; x + 1</span></span><br><span class="line">res0: Int =&gt; Int = $$Lambda$1026/1792711692@7412ed6b</span><br></pre></td></tr></table></figure><p>固定写法：左边是参数列表，中间符号=&gt;，右边是函数体<br>匿名函数无函数名，也无需给出函数的结果类型</p></li><li><p>函数字面量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val f = (x: Int) =&gt; x + 1</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> f(10)</span></span><br><span class="line">res0: Int = 11</span><br></pre></td></tr></table></figure><p>其中表达式有半部分为一个匿名函数，函数作为一个变量(或不变量)，用变量名+参数表方式调用，与普通方法的调用几乎相同。<br><strong> 需要注意的是函数字面量声明函数时不需要写出函数的返回值类型，函数体的最后一条表达式的结果会作为返回值返回 </strong></p></li><li><p>函数值<br>函数字面量与函数值的关系就像类与对象的关系。函数字面量其实就是一个实现了trait Function*的函数类，在运行时实例化了一个函数类，这个实例就是函数值</p></li></ul><h4 id="函数的本质"><a href="#函数的本质" class="headerlink" title="函数的本质"></a>函数的本质</h4><p>scala不像java有基本类型与引用类型之分，scala中一切皆对象，包括函数也是对象。scala中定义了一系列trait，Function0 - Function22，其中0-22表示参数的个数(至于为什么是到22，理论上讲程序中不会出现多于22个参数的函数)。而函数正是Function<em>的实例。如<code>val f = (x: Int) =&gt; x + 1</code>其实就是Function1的实例。下面看下Function</em>的源码，以Function3为例<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** A function of 3 parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function3</span>[-<span class="type">T1</span>, -<span class="type">T2</span>, -<span class="type">T3</span>, +<span class="type">R</span>] <span class="keyword">extends</span> <span class="title">AnyRef</span> </span>&#123; self =&gt;</span><br><span class="line">  <span class="comment">/** Apply the body of this function to the arguments.</span></span><br><span class="line"><span class="comment">   *  @return   the result of function application.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(v1: <span class="type">T1</span>, v2: <span class="type">T2</span>, v3: <span class="type">T3</span>): <span class="type">R</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Creates a curried version of this function.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @return   a function `f` such that `f(x1)(x2)(x3) == apply(x1, x2, x3)`</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@annotation</span>.unspecialized <span class="function"><span class="keyword">def</span> <span class="title">curried</span></span>: <span class="type">T1</span> =&gt; <span class="type">T2</span> =&gt; <span class="type">T3</span> =&gt; <span class="type">R</span> = &#123;</span><br><span class="line">    (x1: <span class="type">T1</span>) =&gt; (x2: <span class="type">T2</span>) =&gt; (x3: <span class="type">T3</span>) =&gt; apply(x1, x2, x3)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Creates a tupled version of this function: instead of 3 arguments,</span></span><br><span class="line"><span class="comment">   *  it accepts a single [[scala.Tuple3]] argument.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  @return   a function `f` such that `f((x1, x2, x3)) == f(Tuple3(x1, x2, x3)) == apply(x1, x2, x3)`</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@annotation</span>.unspecialized <span class="function"><span class="keyword">def</span> <span class="title">tupled</span></span>: <span class="type">Tuple3</span>[<span class="type">T1</span>, <span class="type">T2</span>, <span class="type">T3</span>] =&gt; <span class="type">R</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Tuple3</span>(x1, x2, x3) =&gt; apply(x1, x2, x3)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>() = <span class="string">"&lt;function3&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到其中有一个apply方法(先忽略其他方法)，接受三个泛型参数，所以当我们调用<code>f(1)</code>时，其实是调用了Function1实例的apply方法。</p><h4 id="函数与方法"><a href="#函数与方法" class="headerlink" title="函数与方法"></a>函数与方法</h4><p>在学习过程中，还有一点很困扰，就是我们在类中用def定义的是不是函数，如果不是函数，它又是什么，跟函数又有什么区别呢？<br>首先呢使用def 关键字定义的是方法，不是函数，虽然在实际应用中几乎没有差别，但还是需要了解两者的不同的    </p><p><strong> 方法 </strong><br>定义在类中，作为某个对象的成员方法，使用def关键字定义<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> def a(x: Int):Int = x + 1</span></span><br><span class="line">a: (x: Int)Int</span><br></pre></td></tr></table></figure></p><p><strong> 两者的区别 </strong></p><ul><li>方法使用def关键字定义，而函数不用(函数使用val/var或干脆匿名)</li><li>方法是类的一部分，函数是对象可以赋值给一个val/var</li><li>函数作为对象可以像任何其他数据类型一样被传递和操作，而方法不行，如果想要传递方法，则需要把方法转换为函数</li><li>定义方法时，如果没有参数，则参数表可以省略不写(即方法名后不写())，而函数不行</li><li>定义函数时参数列表后不能声明结果类型，如下面的写法会编译错误<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> f(x: Int):Int =&gt; x + 1</span></span><br><span class="line">&lt;console&gt;:1: error: ';' expected but '=&gt;' found.</span><br><span class="line">       f(x: Int):Int =&gt; x + 1</span><br><span class="line">                     ^</span><br></pre></td></tr></table></figure></li></ul><p><strong> 两者的转换 </strong></p><ul><li><p>第一种情况，方法直接转为函数<br>不能将方法直接声明为一个val/var，如下面的写法会编译错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> def m(x: Int):Int = x + 1</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val f = m</span></span><br><span class="line">&lt;console&gt;:12: error: missing argument list for method m</span><br><span class="line">Unapplied methods are only converted to functions when a function type is expected.</span><br><span class="line">You can make this conversion explicit by writing `m _` or `m(_)` instead of `m`.</span><br><span class="line">       val f = m</span><br></pre></td></tr></table></figure><p>正确写法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> def m(x: Int):Int = x + 1</span></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val f = m _</span></span><br><span class="line">f: Int =&gt; Int = $$Lambda$1069/727861082@4990b335</span><br></pre></td></tr></table></figure><p>这个转换的其实是使用了部分应用(Partial Applied Function)，下面将会讲到</p></li><li><p>第二种情况，需要函数的地方使用方法<br>这种情况下不需要使用下划线，方法会被自动转换为函数，称之为eta转换。关于eta-expansion与eta-conversion的解释可以参考<a href="http://hongjiang.info/scala-eta-conversion/" target="_blank" rel="noopener">王宏江-scala中的eta-conversion</a>与<a href="https://hongjiang.info/eta-conversion-and-eta-expansion/" target="_blank" rel="noopener">王宏江-再谈eta-conversion与eta-expansion</a></p></li></ul><h2 id="scala函数进阶"><a href="#scala函数进阶" class="headerlink" title="scala函数进阶"></a>scala函数进阶</h2><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>引用<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">维基百科</a>中高阶函数的定义</p><blockquote><p>在数学和计算机科学中，高阶函数是至少满足下列一个条件的函数：    </p><ul><li>接受一个或多个函数作为输入    </li><li>输出一个函数    </li></ul></blockquote><p>定义应该很容易理解，也就是函数可以接受另一个函数作为参数，或者函数的结果类型为函数类型。    </p><ul><li><p>第一种：如数学中的函数<code>f(x) = x + 1</code>， <code>g(x) = x * 2</code>，则<code>f(g(x)) = (x * 2) + 1</code>, 即为高阶函数。用代码实现即为</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span></span>(x: <span class="type">Int</span>) = x * <span class="number">2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(x: <span class="type">Int</span>, g: <span class="type">Int</span> =&gt; <span class="type">Int</span>) = g(x) + <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>第二种：结果类型为函数类型</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span></span>(x: <span class="type">Int</span>):(<span class="type">Int</span> =&gt; <span class="type">Int</span>) = &#123;</span><br><span class="line">  <span class="keyword">val</span> k = x * <span class="number">2</span></span><br><span class="line">  (y: <span class="type">Int</span>) =&gt; y + k + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="函数的部分应用"><a href="#函数的部分应用" class="headerlink" title="函数的部分应用"></a>函数的部分应用</h4><p>先看下代码如何实现函数的部分应用吧<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> def sum(x: Int, y: Int, z: Int) = x + y + z</span></span><br><span class="line">sum: (x: Int, y: Int, z: Int)Int</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val a = sum _</span></span><br><span class="line">a: (Int, Int, Int) =&gt; Int = $$Lambda$1055/565627330@309cedb6</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> a(1,2,3)</span></span><br><span class="line">res0: Int = 6</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val b = sum(1, _: Int, _: Int)</span></span><br><span class="line">b: (Int, Int) =&gt; Int = $$Lambda$1060/605472344@6d5f4900</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> b(2,3)</span></span><br><span class="line">res1: Int = 6</span><br></pre></td></tr></table></figure></p><p>上面代码中出现了两种写法</p><ul><li>写法一<br><code>val a = sum _</code><br>这行代码表示sum方法的三个参数都为给出，整个参数表都用占位符<code>_</code>代替，所以这行代码的效果其实就是讲方法sum转换为了函数a。与之相同的写法还有<br><code>val a = sum(_)</code></li><li>写法二<br><code>val b = sum(1, _: Int, _: Int)</code><br>这行代码表示，已知三个参数中的x，y和z未给出，用占位符<code>_</code>代替，最后返回一个包含了两个参数的函数b    </li></ul><p>部分应用从数学角度理解比较容易，如上面例子中的sum，其实对应于数学中的<code>sum(x,y,z) = x + y + z</code>，这是一个三元函数(既有三个未知数)，而写法二对sum的部分应用，相当于我们现在得知<code>x = 1</code>，则带入函数得<code>sum(y,z) = 1 + y + z</code>，也就是函数f消去了未知元x。<strong> 整体来看函数的部分应用其实就是数学中的消元。 </strong> 而写法是对未消去任何参数的一种简写</p><h4 id="函数的柯里化"><a href="#函数的柯里化" class="headerlink" title="函数的柯里化"></a>函数的柯里化</h4><p>在scala中函数函数可以有多个参数列表，而函数柯里化就是将函数的多参数列表转换为多个多参数列表。写法如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> def sum(x: Int, y: Int) = x + y</span></span><br><span class="line">sum: (x: Int, y: Int)Int</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val a = sum _</span></span><br><span class="line">a: (Int, Int) =&gt; Int = $$Lambda$1075/571435580@5eb041b5</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val b = a.curried</span></span><br><span class="line">b: Int =&gt; (Int =&gt; Int) = scala.Function2$$Lambda$1076/1263872787@524dd373</span><br></pre></td></tr></table></figure></p><p>柯里化是通过调用函数对象的curried方法实现的。也就是说调用的是Function*中的curried方法(Function2-Function22拥有curried方法，Function0及Function1没有，因为无参函数和但参函数不需要也不能柯里化)，以Function2为例，我们看下源码的实现<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function2</span>[-<span class="type">T1</span>, -<span class="type">T2</span>, +<span class="type">R</span>] <span class="keyword">extends</span> <span class="title">AnyRef</span> </span>&#123; self =&gt;</span><br><span class="line">  ...</span><br><span class="line">  <span class="meta">@annotation</span>.unspecialized <span class="function"><span class="keyword">def</span> <span class="title">curried</span></span>: <span class="type">T1</span> =&gt; <span class="type">T2</span> =&gt; <span class="type">R</span> = &#123;</span><br><span class="line">    (x1: <span class="type">T1</span>) =&gt; (x2: <span class="type">T2</span>) =&gt; apply(x1, x2)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>curried的实现是将一个多参函数转换为一个单参函数的函数链，对于上面的例子来说就是把<code>sum(x,y)</code>转换成了<code>sum(x)(y)</code>，<code>sum(1)(2)</code>也就是对两个单参函数的依次调用，而<code>sum(1)</code>或者<code>sum(2)</code>其实相当于对sum函数的部分应用，返回值是一个单参函数</p><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>引用别人blog中对闭包的定义</p><blockquote><p>闭包是一个函数，返回值依赖于声明在函数外部的一个或多个变量。</p></blockquote><p>示例<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span><span class="bash"> var more = 1</span></span><br><span class="line">more: Int = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span><span class="bash"> val add = (i: Int) =&gt; i + more</span></span><br><span class="line">add: Int =&gt; Int = $$Lambda$1045/640294829@6be6931f</span><br></pre></td></tr></table></figure></p><p>上面例子中add函数的计算依赖于自由变量more，也就是闭包了。闭包很像函数字面量，不同的是，闭包运算的过程不只依赖于输入参数，还需要依赖函数之外的一个或多个自由变量。</p><p>关于闭包的详细解释可以参考<a href="https://zhuanlan.zhihu.com/p/21346046" target="_blank" rel="noopener">知乎-什么是闭包</a>，引用博文中的总结</p><blockquote><p>最简洁、直击要害的回答，我能想到的分别有这么三句（版权属于 ：</p><ul><li>闭包是一个有状态（不消失的私有数据）的函数。</li><li>闭包是一个有记忆的函数。</li><li>闭包相当于一个只有一个方法的紧凑对象（a compact object）。</li></ul></blockquote><p>上面这三句话是等价的</p><h4 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h4><p>scala允许在函数内部定义函数，称之为局部函数。它的作用域仅限于外部函数，其他位置无法访问到内部函数，可以达到控制访问的效果<br>示例<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> f = (x:<span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> innerAdd = (i: <span class="type">Int</span>) =&gt; i + <span class="number">1</span></span><br><span class="line">  innerAdd(x) + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于scala中的函数，就先写这么多吧，等到后面开发应用到其他的知识，在作补充。关于函数的部分应用和柯里化的实际意义，在<a href="../../21/scala函数式编程/">scala函数式编程</a>那篇里写出来<br>，这里就不写了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在各类blog及scala书籍中看到的关于函数最多的一句话是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数是一等公民&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看出函数在scala中举足轻重的地位，因此很有必要去全面的掌握它&lt;/p&gt;
&lt;h2 id=&quot;scala函数基础&quot;
      
    
    </summary>
    
      <category term="scala" scheme="http://gslullaby.github.io/categories/scala/"/>
    
    
      <category term="scala" scheme="http://gslullaby.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>scala函数式编程</title>
    <link href="http://gslullaby.github.io/2018/07/21/scala%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://gslullaby.github.io/2018/07/21/scala函数式编程/</id>
    <published>2018-07-21T08:18:04.000Z</published>
    <updated>2018-07-28T07:44:50.007Z</updated>
    
    <content type="html"><![CDATA[<p>从java转向scala已经有一段时间了，虽然平时写代码问题不大，但是因为面向对象编程已经根深蒂固了，一直对函数式编程理解不是很到位，scala虽然是多范式编程语言，但是官方还是鼓励开发者使用函数式编程的，所以很有必要仔细学习并记录一下</p><h2 id="什么是函数式"><a href="#什么是函数式" class="headerlink" title="什么是函数式"></a>什么是函数式</h2><p>函数式编程，不是某一种语言的特性，而是诸多编程思想(如命令式，面向对象等)中的一种。对于它的解释，引用<a href="(http://www.10tiao.com/html/557/201609/2652725732/1.html)">王宏江-Scala中的函数式特性</a>中的一段话</p><blockquote><p>图灵机，以及冯诺依曼对它的实现（冯诺依曼体系），从风格上被归为“命令式”，它的运算过程可以看作不断地修改内存来反映运算的结果，即用命令修改状态；而阿隆佐邱奇提出的 Lambda 演算，则是通过连续的运算（基于函数）得到最终结果。<br>基于Lambda演算的被归为函数式，在众多的函数式编程语言里，Scala的血缘继承自ML 和Haskell 最多。关于ML有本非常好的书《ML for the Working Programmer》，这本书里面提到:<strong>“函数式程序是跟值打交道的，而不是跟状态打交道的。它们的工具是表达式，而不是命令。”</strong></p></blockquote><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><p>上面引文里，函数式程序的工具是表达式，那么什么是表达式呢？<br>表达式可以简单理解为有返回值的语句。在scala中只有表达式，因为在scala中任何语句都有返回值，而在java中则不是。如赋值语句在scala中是有返回值的，返回类型为Unit，而在java中赋值语句没有返回值<br>示例<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">scala&gt;</span> var b = 1</span><br><span class="line">b: Int = 1</span><br><span class="line"></span><br><span class="line"><span class="meta">scala&gt;</span> val a = b = 3</span><br><span class="line">a: Unit = ()</span><br></pre></td></tr></table></figure></p><p>变量b被重新赋值为3，赋值的结果类型为Unit，并且赋值给了a</p><h4 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h4><p>函数式编程就是把计算机中的运算抽象为数学中的运算，程序中的函数和方法抽象为数学中的函数。如<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(x: <span class="type">Int</span>):<span class="type">Int</span> = &#123;</span><br><span class="line">  <span class="number">3</span>X + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">对应于数学中的</span><br><span class="line"></span><br><span class="line">f(<span class="type">X</span>) = <span class="number">3</span>X + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>函数的参数即为数学函数中的未知数(x或y等等)，整个运算过程封装在函数体中，并且不需要依赖除了参数外的其他数据，运算完成后返回运算的结果。  </p><p>对于复杂的运算，抽象为多个函数的嵌套调用，整个运算的过程都是围绕函数进行的，摒弃了命令式编程中对状态的依赖，这也是为什么scala鼓励我们使用val不变量，而尽量少使用var变量</p><p>最终整个应用程序都是由一个一个的函数组成</p><p>为了支持函数式编程，scala中提供了很多函数特性，这些特性在<a href="../../23/scala中的函数/">scala中的函数那篇blog</a>里，简单罗列下</p><ul><li>引入了与其他类型地位平等的函数类型，函数可传递，可作为返回值</li><li>对高阶函数的支持</li><li>函数的部分应用</li><li>函数柯里化</li><li>函数嵌套</li><li>闭包</li></ul><h2 id="函数式编程的特性"><a href="#函数式编程的特性" class="headerlink" title="函数式编程的特性"></a>函数式编程的特性</h2><p>关于函数式编程的特性可以参考<a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="noopener">阮一峰-函数式编程初探</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从java转向scala已经有一段时间了，虽然平时写代码问题不大，但是因为面向对象编程已经根深蒂固了，一直对函数式编程理解不是很到位，scala虽然是多范式编程语言，但是官方还是鼓励开发者使用函数式编程的，所以很有必要仔细学习并记录一下&lt;/p&gt;
&lt;h2 id=&quot;什么是函数式
      
    
    </summary>
    
      <category term="scala" scheme="http://gslullaby.github.io/categories/scala/"/>
    
    
      <category term="scala" scheme="http://gslullaby.github.io/tags/scala/"/>
    
      <category term="函数式" scheme="http://gslullaby.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>scala学习资料整理</title>
    <link href="http://gslullaby.github.io/2018/07/21/scala%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/"/>
    <id>http://gslullaby.github.io/2018/07/21/scala学习资料整理/</id>
    <published>2018-07-21T07:57:35.000Z</published>
    <updated>2018-07-26T07:04:35.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong><a href="https://twitter.github.io/scala_school/" target="_blank" rel="noopener">twitter scala school</a></strong> Scala课堂是Twitter启动的一系列讲座，用来帮助有经验的工程师成为高效的Scala 程序员<br><strong><a href="http://twitter.github.io/effectivescala/" target="_blank" rel="noopener">twitter - Effective Scala</a></strong> Twitter的Scala最佳实践    </p><h2 id="优质blog"><a href="#优质blog" class="headerlink" title="优质blog"></a>优质blog</h2><p><strong><a href="https://hongjiang.info/scala/" target="_blank" rel="noopener">王宏江scala系列</a></strong></p><h5 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title="持续更新中…"></a>持续更新中…</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://twitter.github.io/scala_school/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="scala" scheme="http://gslullaby.github.io/categories/scala/"/>
    
    
      <category term="scala" scheme="http://gslullaby.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Pages + Hexo搭建博客汇总</title>
    <link href="http://gslullaby.github.io/2018/07/13/hexo_github_pages/"/>
    <id>http://gslullaby.github.io/2018/07/13/hexo_github_pages/</id>
    <published>2018-07-13T08:26:45.195Z</published>
    <updated>2018-07-16T13:07:37.483Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于GitHub Pages + Hexo搭建博客的教程较多，因此此文旨在查缺补漏，记录整个流程，汇总一些参考的优质blog，以及梳理我在搭建过程中遇到的问题。</p><h2 id="如何搭建个人blog"><a href="#如何搭建个人blog" class="headerlink" title="如何搭建个人blog"></a>如何搭建个人blog</h2><p>在开始之前，我先想了下如何搭建个人blog。既然blog是个网站，那么首先能想到的是，需要自己开发一个网站出来啊，有了网站，还需要服务器来部署我们的网站，然后还需要一个域名，方便访问我们的网站。    </p><h4 id="因此我们要做的工作有"><a href="#因此我们要做的工作有" class="headerlink" title="因此我们要做的工作有"></a>因此我们要做的工作有</h4><ul><li>开发自己的网站（网站设计，UI开发，评论统计系统集成维护等）</li><li>搭建服务器（部署网站，维护等）</li><li>购买域名（绑定域名）</li></ul><p>首先开发网赚需要耗费巨大精力，其次购买服务器和域名都需要花钱，而我的初衷只是写blog啊，然而却需要做这么多，那岂不是舍本逐末了。好在已经有现成且免费的框架和工具，GitHub Pages<br>和Hexo帮我们做了上面几乎所有的事儿</p><h4 id="GitHub-Pages介绍"><a href="#GitHub-Pages介绍" class="headerlink" title="GitHub Pages介绍"></a>GitHub Pages介绍</h4><p>GitHub Pages是Github提供的一个免费静态网站的托管服务，旨在直接从GitHub仓库托管个人/组织/项目的页面，并且为站点提供了默认域名github.io<br>。也就是说GitHub Pages帮我们解决了 <strong>服务器和域名</strong> 这两大难题</p><p>详细介绍：<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages官网</a></p><h4 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h4><p>Hexo是一款基于Node.js的静态博客框架。通过Hexo，用户可以定制自己喜欢的网站主题，专注与使用Markdown编写blog，它会帮用户生成静态网站并托管在GitHub，相当的简便。因此Hexo帮我们解决了<strong> 开发网站 </strong> 的难题</p><p>详细介绍：<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo中文文档</a>  </p><h2 id="搭建个人blog的流程"><a href="#搭建个人blog的流程" class="headerlink" title="搭建个人blog的流程"></a>搭建个人blog的流程</h2><p>在使用Hexo极力推荐阅读<strong> <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo中文文档</a> </strong> ,文档里的说明要比许多blog里清晰的多</p><h4 id="搭建前的准备工作"><a href="#搭建前的准备工作" class="headerlink" title="搭建前的准备工作"></a>搭建前的准备工作</h4><p>安装流程在上文中的<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo中文文档</a>里有详细说明</p><ul><li>安装Git</li><li>安装Node.js</li><li>安装Hexo  </li></ul><h4 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h4><p>这里只列出简单流程，定制主题，及git分支设置在后面介绍</p><ol><li><p>GitHub上创建新仓库，仓库名为 <strong> GitHub用户名.github.io </strong></p><blockquote><p>这里需要注意，仓库的名字必须为上面的格式，否则部署后将无法访问blog</p></blockquote></li><li><p>GitHub新建分支hexo，并设置为默认分支</p></li><li><p>使用Git克隆新建仓库到本地（此时为hexo分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/github_user_name/github_user_name.github.io.git</span><br></pre></td></tr></table></figure></li><li><p>在仓库根目录使用hexo init命令初始化（此时为hexo分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>上一步完成后依次使用hexo g 与 hexo s（此时为hexo分支），其中g为generator，s为server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器输入localhost:4000查看本地blog效果，如下图</p><img src="/2018/07/13/hexo_github_pages/hexo_landscape.jpeg" title="Hexo默认主题"></li><li><p>修改仓库根目录下的_config.yml文件，修改deploy中的以下字段并保存，注意branch要设置为master</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span>    </span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="attr">https://github.com/github_user_name/github_user_name.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>提交本地变更至hexo分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">'commit msg'</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure></li><li><p>使用hexo d命令完成blog部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li></ol><h4 id="blog目录结构"><a href="#blog目录结构" class="headerlink" title="blog目录结构"></a>blog目录结构</h4><p>在上面流程的第4步中，执行完hexo init命令后，会在文件夹下生成hexo工程，以下简要展示生成的目录结构及各个目录的作用，更为详细的解释见<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo目录结构</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml      // 网站全局配置文件，详细说明见</span><br><span class="line">|-- package.json     //</span><br><span class="line">|-- scaffolds        //</span><br><span class="line">|-- source           // 网站资源文件夹，存放网站图片，文章等</span><br><span class="line">   |-- _drafts</span><br><span class="line">   |-- _posts        // 我们的Markdown和HTML文件存放在次文件夹</span><br><span class="line">|-- themes</span><br><span class="line">   |-- landscape     // 官方默认的主题</span><br><span class="line">   |-- next          // next主题</span><br></pre></td></tr></table></figure></p><p>经过第4步之后，通过修改_config.yml文件进行网站的配置,如网站title，author等，详情见<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo网站配置</a>。其中最应该注意的是deploy字段，该字段用于配置网站的部署，如网站部署到git的xxx仓库的xxx分支，或是地址为xxx.xxx.xxx.xxx的服务器，详情见<a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">Hexo deploy</a>    </p><h4 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h4><p>Hexo允许用户自定义主题，下面展示主题的设置方式</p><ol><li>挑选自己喜欢的主题，找到其仓库地址</li><li><p>命令行cd 定位到themes文件夹，将主题clone至该文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes</span><br><span class="line">$ git <span class="built_in">clone</span> &lt;theme repo&gt;</span><br></pre></td></tr></table></figure></li><li><p>在clone完成后，新添加的文件夹名称即为主题名称xxx，打开_config.yml将theme字段的landscape修改为xxx</p></li></ol><p>关于主题的挑选，如果没有web前段经验，最好挑选那些star数计较高，社区比较活跃，经常迭代维护的主题，如我自己使用的next主题，下面是我在挑选主题时参考的资料   </p><p><a href="https://www.zhihu.com/question/24422335/answer/46357100" target="_blank" rel="noopener">知乎-有哪些好看的Hexo主题</a></p><blockquote><p>高赞回答用python爬虫爬出来的主题star排行榜 ,推荐参考这个挑选主题     </p></blockquote><p><a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">官方主题列表</a></p><blockquote><p>官方没有对主题进行排名，挑选时稍微麻烦些</p></blockquote><p><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">推荐NexT主题</a></p><blockquote><p>NexT主题外观比较简洁利落，并且社区活跃，有详尽的中文文档，主题的外观也可进行各种灵活的配置，是前段盲的必备良药。对于该主题的详细用法，其官方文档中有详细的说明，也就不再赘述了</p></blockquote><h4 id="关于git仓库的说明"><a href="#关于git仓库的说明" class="headerlink" title="关于git仓库的说明"></a>关于git仓库的说明</h4><p>在搭建流程中的前两步，建立完仓库后，又新建了一个hexo分支，并且设置为默认分支。这是因为我们在维护我们的网站时，要维护以下两部分内容</p><ul><li><p>Hexo工程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init之后生成的部分</span><br></pre></td></tr></table></figure></li><li><p>生成的静态网站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">之前在_config.yml中配置了deploy的git仓库及分支，这里我配置的是master分支，在执行了hexo deploy命令之后，Hexo就会生成静态静态网站提交至master分支并自动部署</span><br></pre></td></tr></table></figure></li></ul><p>这两部分都需要提交至git仓库的，第一部分提交至git，我们就可以随时随地只要有电脑网络就可以clone工程，写blog并更新网站。第二部分是GitHub Pages部署网站必须的部分。这两部分的内容互不相干，因此建议新建hexo分支，用于存储我们的Hexo工程，master分支用于部署网站</p><p>参考的文档：<a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">知乎-使用Hexo，如果换了电脑怎么更新博客</a></p><h4 id="关于NexT主题个人签名不显示的问题"><a href="#关于NexT主题个人签名不显示的问题" class="headerlink" title="关于NexT主题个人签名不显示的问题"></a>关于NexT主题个人签名不显示的问题</h4><p>在NexT主题配置文件_config.yml中，如果设置seo字段为true，则网站配置文件_config.yml中的description字段会被用于seo，而不会显示为签名，这时如果想要显示个人签名，需要额外添加signature字段<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">signature:</span> <span class="string">随行、随记</span></span><br></pre></td></tr></table></figure></p><h2 id="Hexo-SEO优化"><a href="#Hexo-SEO优化" class="headerlink" title="Hexo SEO优化"></a>Hexo SEO优化</h2><p>辛辛苦苦搭好了blog，写了文章，最后发现浏览器里搜不到啊，根本没人看啊，怎么办啊，好没有成就感。这时候就需要SEO出马了，那么什么是SEO呢？</p><blockquote><p>SEO 英文全称Search Engine Optimization 即搜索引擎优化。是一种利用搜索引擎规则提高网站在有关引擎内的自然排名</p></blockquote><p>既然是针对搜索引擎的优化，那么也就是针对Baidu和Google的优化了。相关blog有很多，并且都是死套路，所以这里就挑选几篇比较新比较好的blog列出来</p><p><a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo博客Next主题SEO优化方法</a><br><a href="https://juejin.im/post/5ae7f8a2f265da0ba266c5c6" target="_blank" rel="noopener">Hexo个人博客SEO优化系列</a></p>]]></content>
    
    <summary type="html">
    
      网上关于GitHub Pages + Hexo搭建博客的教程较多，因此此文旨在查缺补漏，记录整个流程，汇总一些参考的优质blog，以及梳理我在搭建过程中遇到的问题。
    
    </summary>
    
      <category term="Web前端" scheme="http://gslullaby.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://gslullaby.github.io/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="http://gslullaby.github.io/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://gslullaby.github.io/2018/07/12/hello-world/"/>
    <id>http://gslullaby.github.io/2018/07/12/hello-world/</id>
    <published>2018-07-12T08:30:32.549Z</published>
    <updated>2018-07-12T12:46:07.571Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="Web前端" scheme="http://gslullaby.github.io/categories/Web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Hexo" scheme="http://gslullaby.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
